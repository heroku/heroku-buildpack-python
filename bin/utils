#!/usr/bin/env bash

# Be careful about moving these to bin/compile, since this utils script is sourced
# directly by other scripts run via subshells, and not only from bin/compile.
shopt -s extglob
shopt -s nullglob

source "${BUILDPACK_DIR}/vendor/buildpack-stdlib_v8.sh"

if [[ "$(uname)" == "Darwin" ]]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

# Syntax sugar.
indent() {
  sed "s/^/       /"
}


# Clean up pip output
cleanup() {
  sed -e 's/\.\.\.\+/.../g' | sed -e '/already satisfied/Id' | sed -e '/No files were found to uninstall/Id' | sed -e '/Overwriting/Id' | sed -e '/python executable/Id' | sed -e '/no previously-included files/Id'
}

# Buildpack Steps.
puts-step() {
  echo "-----> $*"
}

# Buildpack Warnings.
puts-warn() {
  echo " !     $*"
}

# Does some serious copying.
deep-cp() {
  declare source="$1" target="$2"

  mkdir -p "$target"

  # cp doesn't like being called without source params,
  # so make sure they expand to something first.
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s nullglob dotglob
    set -- "$source"/!(tmp|.|..)
    [[ $# == 0 ]] || cp -a "$@" "$target"
  )
}

# Measure the size of the Python installation.
measure-size() {
  { du -s .heroku/python 2>/dev/null || echo 0; } | awk '{print $1}'
}

# Returns 0 if the specified module exists, otherwise returns 1.
is_module_available() {
  local module_name="${1}"
  python -c "import sys, importlib.util; sys.exit(0 if importlib.util.find_spec('${module_name}') else 1)"
}

# The requirement versions are effectively buildpack constants, however, we want
# Dependabot to be able to update them, which requires that they be in requirements
# files. The requirements files contain contents like `package==1.2.3` (and not just
# the package version) so we have to extract the version substring from it.
get_requirement_version() {
  local package_name="${1}"
  local requirement
  requirement=$(cat "${BUILDPACK_DIR}/requirements/${package_name}.txt")
  local requirement_version="${requirement#"${package_name}=="}"
  echo "${requirement_version}"
}
