source $BIN_DIR/utils

# Location of 'manage.py', if it exists.
MANAGE_FILE=$(find . -maxdepth 3 -type f -name 'manage.py' -printf '%d\t%P\n' | sort -nk1 | cut -f2 | head -1)
MANAGE_FILE=${MANAGE_FILE:-fakepath}

# Ensure that Django is explicitly specified in requirements.txt
pip-grep -s requirements.txt django Django && DJANGO_INSTALLED=1

django-manage-command() {
    set +e

    puts-cmd "python $MANAGE_FILE $1 --noinput"

    # Run command, cleanup some of the noisy output.
    python $MANAGE_FILE $1 --noinput --traceback 2>&1 | sed '/^Post-processed/d;/^Copying/d;/^$/d' | indent
    COMMAND_STATUS="${PIPESTATUS[0]}"

    set -e

    # Display a warning if command failed.
    [ $COMMAND_STATUS -ne 0 ] && {

        echo
        echo " !     Error while running '$ python $MANAGE_FILE $1 --noinput'."
        echo "       See traceback above for details."
        echo
        echo "       You may need to update application code to resolve this error."
        echo "       Or, you can disable migrate for this application:"
        echo
        echo "          $ heroku config:set $3=1"
        echo
        echo "       https://devcenter.heroku.com/articles/django-assets"

        # Additionally, dump out the environment, if debug mode is on.
        if [ "$2" ]; then
            echo
            echo "****** $1 environment variables:"
            echo
            env | indent
        fi

        # Abort the build.
        exit 1
    }

    echo
}
