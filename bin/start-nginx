#!/usr/bin/env bash

psmgr=/tmp/nginx-buildpack-wait
rm -f $psmgr
mkfifo $psmgr

#Evaluate config to get $PORT
erb /app/config/nginx.conf.erb > /app/config/nginx.conf

n=1
while getopts :f option ${@:1:2}
do
        case "${option}"
        in
                f) FORCE=$OPTIND; n=$((n+1));;
        esac
done

#Start log redirection.
(
    #Initialize log directory.
    mkdir -p /app/logs/nginx
    touch /app/logs/nginx/access.log /app/logs/nginx/error.log
    #Redirect NGINX logs to stdout.
    echo 'buildpack=nginx at=logs-initialized'
    tail -qF -n 0 logs/nginx/*.log
    echo 'logs' >$psmgr
) &

#Start App Server
(
	#Take the command passed to this bin and start it.
	#E.g. bin/start-nginx bundle exec unicorn -c config/unicorn.rb
        COMMAND=${@:$n}
	echo "buildpack=nginx at=start-app cmd=$COMMAND"
	$COMMAND
	echo 'app' >$psmgr
) &

if [[ -z "$FORCE" ]]
then
	FILE="/tmp/app-initialized"

	#We block on app-initialized so that when NGINX binds to $PORT
	#are app is ready for traffic.
	while [[ ! -f "$FILE" ]]
	do
		echo 'buildpack=nginx at=app-initialization'
		sleep 1
	done
	echo 'buildpack=nginx at=app-initialized'
fi


#Start NGINX
(
    #We expect nginx to run in foreground.
    #We also expect a socket to be at /tmp/nginx.socket.
    echo 'buildpack=nginx at=nginx-start'
    bin/nginx -p . -c /app/config/nginx.conf
    echo 'nginx' >$psmgr
) &

#This read will block the process waiting on a msg to be put into the fifo.
#If any of the processes defined above should exit,
#a msg will be put into the fifo causing the read operation
#to un-block. The process putting the msg into the fifo
#will use it's process name as a msg so that we can print the offending
#process to stdout.
read exit_process <$psmgr
echo "buildpack=nginx at=exit process=$exit_process"
exit 1
