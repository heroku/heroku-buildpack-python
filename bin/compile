#!/usr/bin/env bash
# Usage: bin/compile <build-dir> <cache-dir> <env-dir>
# See: https://devcenter.heroku.com/articles/buildpack-api
# shellcheck disable=SC2250 # TODO: Use braces around variable references even when not strictly required.

set -euo pipefail
shopt -s inherit_errexit

# Note: This can't be enabled via app config vars, since at this point they haven't been loaded from ENV_DIR.
if [[ "${BUILDPACK_XTRACE:-0}" == "1" ]]; then
	set -o xtrace
fi

BUILD_DIR="${1}"
CACHE_DIR="${2}"
ENV_DIR="${3}"

# The absolute path to the root of the buildpack.
BUILDPACK_DIR=$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)

source "${BUILDPACK_DIR}/bin/utils"
source "${BUILDPACK_DIR}/lib/utils.sh"
source "${BUILDPACK_DIR}/lib/cache.sh"
source "${BUILDPACK_DIR}/lib/hooks.sh"
source "${BUILDPACK_DIR}/lib/metadata.sh"
source "${BUILDPACK_DIR}/lib/output.sh"
source "${BUILDPACK_DIR}/lib/package_manager.sh"
source "${BUILDPACK_DIR}/lib/pip.sh"
source "${BUILDPACK_DIR}/lib/pipenv.sh"
source "${BUILDPACK_DIR}/lib/python_version.sh"
source "${BUILDPACK_DIR}/lib/poetry.sh"

compile_start_time=$(nowms)

# Initialise metadata store.
meta_init "${CACHE_DIR}" "python"
meta_setup

# Prepend proper path for old-school virtualenv hackery.
# This may not be necessary.
export PATH=:/usr/local/bin:$PATH

# Exported for use in subshells, such as the steps run via sub_env.
export BUILD_DIR CACHE_DIR ENV_DIR

# Set the base URL for downloading buildpack assets like Python runtimes.
# The user can provide BUILDPACK_S3_BASE_URL to specify a custom target.
# Note: this is designed for non-Heroku use, as it does not use the user-provided
# environment variable mechanism (the ENV_DIR).
S3_BASE_URL="${BUILDPACK_S3_BASE_URL:-"https://heroku-buildpack-python.s3.us-east-1.amazonaws.com"}"
# This has to be exported since it's used by the geo-libs step which is run in a subshell.

# Common Problem Warnings:
# This section creates a temporary file in which to stick the output of `pip install`.
# The `warnings` subscript then greps through this for common problems and guides
# the user towards resolution of known issues.
WARNINGS_LOG=$(mktemp)

# Sanitize externally-provided environment variables:
# The following environment variables are either problematic or simply unnecessary
# for the buildpack to have knowledge of, so we unset them, to keep the environment
# as clean and pristine as possible.
unset PYTHONHOME PYTHONPATH

# Import the warnings script, which contains the `pip install` user warning mechanisms
# (mentioned and explained above)
source "${BUILDPACK_DIR}/bin/warnings"

# Make the directory in which we will create symlinks from the temporary build directory
# to `/app`.
# Symlinks are required, since Python is not a portable installation.
# More on this topic later.
mkdir -p /app/.heroku

PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"
EXPORT_PATH="${BUILDPACK_DIR}/export"
GUNICORN_PROFILE_PATH="$BUILD_DIR/.profile.d/python.gunicorn.sh"
WEB_CONCURRENCY_PROFILE_PATH="$BUILD_DIR/.profile.d/WEB_CONCURRENCY.sh"
python_home='/app/.heroku/python'

# NB: Python must be added to PATH using the symlinked `/app` location and not its actual location
# in BUILD_DIR, so that Python reports its location (via `sys.prefix`, `sys.executable` and others)
# using `/app` paths which will still work at run-time after relocation. Amongst other things, this
# ensures that the shebang lines in the entrypoint scripts of installed packages are correct.
export PATH="/app/.heroku/python/bin:${PATH}"
# Tell Python to not buffer it's stdin/stdout.
export PYTHONUNBUFFERED=1
# Ensure Python uses a Unicode locale, to prevent the issues described in:
# https://github.com/docker-library/python/pull/570
export LANG="en_US.UTF-8"
export C_INCLUDE_PATH="/app/.heroku/python/include${C_INCLUDE_PATH:+:${C_INCLUDE_PATH}}"
export CPLUS_INCLUDE_PATH="/app/.heroku/python/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}"
export LIBRARY_PATH="/app/.heroku/python/lib${LIBRARY_PATH:+:${LIBRARY_PATH}}"
export LD_LIBRARY_PATH="/app/.heroku/python/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
export PKG_CONFIG_PATH="/app/.heroku/python/lib/pkg-config${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}"

# Global pip options (https://pip.pypa.io/en/stable/user_guide/#environment-variables).
# Disable pip's warnings about EOL Python since we show our own.
export PIP_NO_PYTHON_VERSION_WARNING=1

cd "$BUILD_DIR"

# Runs a `bin/pre_compile` script if found in the app source, allowing build customisation.
hooks::run_hook "pre_compile"

package_manager="$(package_manager::determine_package_manager "${BUILD_DIR}")"
meta_set "package_manager" "${package_manager}"

cached_python_version="$(cache::cached_python_version "${CACHE_DIR}")"

# We use the Bash 4.3+ `nameref` feature to pass back multiple values from this function
# without having to hardcode globals. See: https://stackoverflow.com/a/38997681
python_version::read_requested_python_version "${BUILD_DIR}" "${package_manager}" "${cached_python_version}" requested_python_version python_version_origin
meta_set "python_version_reason" "${python_version_origin}"

# TODO: More strongly recommend specifying a Python version (eg switch the messaging to
# be a warning instead, after version resolution, and mention .python-version inline)
# TODO: Add runtime.txt deprecation warning.
case "${python_version_origin}" in
	default)
		output::step "No Python version was specified. Using the buildpack default: Python ${requested_python_version}"
		echo "       To use a different version, see: https://devcenter.heroku.com/articles/python-runtimes"
		;;
	cached)
		output::step "No Python version was specified. Using the same version as the last build: Python ${requested_python_version}"
		echo "       To use a different version, see: https://devcenter.heroku.com/articles/python-runtimes"
		;;
	*)
		output::step "Using Python ${requested_python_version} specified in ${python_version_origin}"
		;;
esac

python_full_version="$(python_version::resolve_python_version "${requested_python_version}" "${python_version_origin}")"
python_major_version="${python_full_version%.*}"
meta_set "python_version" "${python_full_version}"
meta_set "python_version_major" "${python_major_version}"

cache::restore "${BUILD_DIR}" "${CACHE_DIR}" "${STACK:?}" "${cached_python_version}" "${python_full_version}" "${package_manager}"

# The directory for the .profile.d scripts.
mkdir -p "$(dirname "$PROFILE_PATH")"
# The directory for editable VCS dependencies.
mkdir -p /app/.heroku/src

# On Heroku CI, builds happen in `/app`. Otherwise, on the Heroku platform,
# they occur in a temp directory. Because Python is not portable, we must create
# symlinks to emulate that we are operating in `/app` during the build process.
# This is (hopefully obviously) because apps end up running from `/app` in production.
# Realpath is used to support use-cases where one of the locations is a symlink to the other.
# shellcheck disable=SC2312 # TODO: Invoke this command separately to avoid masking its return value.
if [[ "$(realpath "${BUILD_DIR}")" != "$(realpath /app)" ]]; then
	# python expects to reside in /app, so set up symlinks
	# we will not remove these later so subsequent buildpacks can still invoke it
	ln -nsf "$BUILD_DIR/.heroku/python" /app/.heroku/python
	# Note: .heroku/src is copied in later.
fi

# Download and install Python using pre-built binaries from S3.
install_python_start_time=$(nowms)
source "${BUILDPACK_DIR}/bin/steps/python"
meta_time "python_install_duration" "${install_python_start_time}"

# Install the package manager and related tools.
package_manager_install_start_time=$(nowms)
case "${package_manager}" in
	pip)
		pip::install_pip_setuptools_wheel "${python_home}" "${python_major_version}"
		;;
	pipenv)
		# TODO: Stop installing pip when using Pipenv.
		pip::install_pip_setuptools_wheel "${python_home}" "${python_major_version}"
		pipenv::install_pipenv
		;;
	poetry)
		poetry::install_poetry "${CACHE_DIR}" "${EXPORT_PATH}"
		;;
	*)
		utils::abort_internal_error "Unhandled package manager: ${package_manager}"
		;;
esac
meta_time "package_manager_install_duration" "${package_manager_install_start_time}"

# SQLite3 support.
# Installs the sqlite3 dev headers and sqlite3 binary but not the
# libsqlite3-0 library since that exists in the base image.
# We skip this step on Python 3.13 or when using Poetry, as a first step towards removing this feature.
if [[ "${python_major_version}" == +(3.8|3.9|3.10|3.11|3.12) && "${package_manager}" != "poetry" ]]; then
	install_sqlite_start_time=$(nowms)
	source "${BUILDPACK_DIR}/bin/steps/sqlite3"
	buildpack_sqlite3_install
	meta_time "sqlite_install_duration" "${install_sqlite_start_time}"
fi

# Install app dependencies.
dependencies_install_start_time=$(nowms)
case "${package_manager}" in
	pip)
		pip::install_dependencies
		;;
	pipenv)
		pipenv::install_dependencies
		;;
	poetry)
		poetry::install_dependencies
		;;
	*)
		utils::abort_internal_error "Unhandled package manager: ${package_manager}"
		;;
esac
meta_time "dependencies_install_duration" "${dependencies_install_start_time}"

# Support for NLTK corpora.
nltk_downloader_start_time=$(nowms)
sub_env "${BUILDPACK_DIR}/bin/steps/nltk"
meta_time "nltk_downloader_duration" "${nltk_downloader_start_time}"

# Support for editable installations.
# In CI, $BUILD_DIR is /app.
# Realpath is used to support use-cases where one of the locations is a symlink to the other.
# shellcheck disable=SC2312 # TODO: Invoke this command separately to avoid masking its return value.
if [[ "$(realpath "${BUILD_DIR}")" != "$(realpath /app)" ]]; then
	rm -rf "$BUILD_DIR/.heroku/src"
	deep-cp /app/.heroku/src "$BUILD_DIR/.heroku/src"
fi

# Django collectstatic support.
# The buildpack automatically runs collectstatic for Django applications.
collectstatic_start_time=$(nowms)
sub_env "${BUILDPACK_DIR}/bin/steps/collectstatic"
meta_time "django_collectstatic_duration" "${collectstatic_start_time}"

# Programmatically create .profile.d script for application runtime environment variables.

# Set the PATH to include Python / pip / pipenv / etc.
set_env PATH "\${HOME}/.heroku/python/bin:\${PATH}"
# Tell Python to run in unbuffered mode.
set_env PYTHONUNBUFFERED true
# Tell Python where it lives.
set_env PYTHONHOME "\${HOME}/.heroku/python"
# Set variables for C libraries.
set_env LIBRARY_PATH "\${HOME}/.heroku/python/lib\${LIBRARY_PATH:+:\${LIBRARY_PATH}}"
set_env LD_LIBRARY_PATH "\${HOME}/.heroku/python/lib\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}"
# Locale.
set_default_env LANG en_US.UTF-8
# The Python hash seed is set to random.
set_default_env PYTHONHASHSEED random
# Tell Python to look for Python modules in the /app dir. Don't change this.
set_default_env PYTHONPATH "\${HOME}"

# Python expects to be in /app, if at runtime, it is not, set
# up symlinks… this can occur when the subdir buildpack is used.
cat <<EOT >>"$PROFILE_PATH"
if [[ \$HOME != "/app" ]]; then
    mkdir -p /app/.heroku
    ln -nsf "\$HOME/.heroku/python" /app/.heroku/python
fi
EOT

# At runtime, rewrite paths in editable package .egg-link, .pth and finder files from the build time paths
# (such as `/tmp/build_<hash>`) back to `/app`. This is not done during the build itself, since later
# buildpacks still need the build time paths.
if [[ "${BUILD_DIR}" != "/app" ]]; then
	cat <<EOT >>"$PROFILE_PATH"
find .heroku/python/lib/python*/site-packages/ -type f -and \( -name '*.egg-link' -or -name '*.pth' -or -name '__editable___*_finder.py' \) -exec sed -i -e 's#${BUILD_DIR}#/app#' {} \+
EOT
fi

# Install sane-default script for $WEB_CONCURRENCY and $FORWARDED_ALLOW_IPS.
cp "${BUILDPACK_DIR}/vendor/WEB_CONCURRENCY.sh" "$WEB_CONCURRENCY_PROFILE_PATH"
cp "${BUILDPACK_DIR}/vendor/python.gunicorn.sh" "$GUNICORN_PROFILE_PATH"

# Runs a `bin/post_compile` script if found in the app source, allowing build customisation.
hooks::run_hook "post_compile"

cache::save "${BUILD_DIR}" "${CACHE_DIR}" "${STACK}" "${python_full_version}" "${package_manager}"

meta_time "total_duration" "${compile_start_time}"
