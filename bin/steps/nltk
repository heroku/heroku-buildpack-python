#!/usr/bin/env bash

# This script is run in a subshell via sub_env so doesn't inherit the options/vars/utils from `bin/compile`.
# TODO: Migrate this script to functions under `lib/` and stop running the entire script in a subshell.
set -euo pipefail
BUILDPACK_DIR=$(cd "$(dirname "$(dirname "$(dirname "${BASH_SOURCE[0]}")")")" && pwd)
source "${BUILDPACK_DIR}/bin/utils"
source "${BUILDPACK_DIR}/lib/build_data.sh"
source "${BUILDPACK_DIR}/lib/output.sh"

# These are required by `set_env`.
PROFILE_PATH="${BUILD_DIR:?}/.profile.d/python.sh"
EXPORT_PATH="${BUILDPACK_DIR}/export"

# Check that nltk was installed by pip, otherwise obviously not needed
# shellcheck disable=SC2310 # TODO: This function is invoked in an 'if' condition so set -e will be disabled.
if is_module_available 'nltk'; then
	output::step "Downloading NLTK corpora..."

	nltk_packages_definition="${BUILD_DIR}/nltk.txt"

	if [[ -f "${nltk_packages_definition}" ]]; then
		build_data::set_string "nltk_downloader" "enabled"

		readarray -t nltk_packages <"${nltk_packages_definition}"
		output::step "Downloading NLTK packages: ${nltk_packages[*]}"

		nltk_data_dir="/app/.heroku/python/nltk_data"

		# TODO: Does this even need user-provided env vars, or can we remove the sub_env usage here?
		if ! sub_env python -m nltk.downloader -d "${nltk_data_dir}" "${nltk_packages[@]}" |& output::indent; then
			output::error <<-EOF
				Error: Unable to download NLTK data.

				The 'python -m nltk.downloader' command to download NLTK
				data didn't exit successfully.

				See the log output above for more information.
			EOF
			build_data::set_string "failure_reason" "nltk-downloader"
			exit 1
		fi

		set_env NLTK_DATA "${nltk_data_dir}"
	else
		build_data::set_string "nltk_downloader" "skipped-no-nltk-file"
		echo "       'nltk.txt' not found, not downloading any corpora"
	fi
fi
