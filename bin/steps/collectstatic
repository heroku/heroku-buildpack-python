#!/usr/bin/env bash

# Django Collectstatic runner. If you have Django installed, collectstatic will
# automatically be executed as part of the build process. If collectstatic
# fails, your build fails.

# This functionality will only activate if Django is installed.

# Runtime arguments:
#   - $DISABLE_COLLECTSTATIC: disables this functionality.
#   - $DEBUG_COLLECTSTATIC: upon failure, print out environment variables.

# This script is run in a subshell so doesn't inherit the options/vars/utils from `bin/compile`.
# TODO: Migrate this script to functions under `lib/` and stop running the entire script in a subshell,
# and instead only the parts that need the user-provided config vars loaded.
set -euo pipefail
BUILDPACK_DIR=$(cd "$(dirname "$(dirname "$(dirname "${BASH_SOURCE[0]}")")")" && pwd)
source "${BUILDPACK_DIR}/bin/utils"
source "${BUILDPACK_DIR}/lib/build_data.sh"
source "${BUILDPACK_DIR}/lib/output.sh"

# This must be after the imports above, to prevent user-provided config vars from overwriting
# env vars used by the buildpack such as `CACHE_DIR`:
# https://github.com/heroku/heroku-buildpack-python/issues/972
# TODO: Reduce the scope of this even further, as part of refactoring this file.
export_env "${ENV_DIR}"

if [[ -f .heroku/collectstatic_disabled ]]; then
	output::step "Skipping Django collectstatic since the file '.heroku/collectstatic_disabled' exists."
	output::warning <<-'EOF'
		Warning: The .heroku/collectstatic_disabled file is deprecated.

		Please remove the file and set the env var DISABLE_COLLECTSTATIC=1 instead.
	EOF
	build_data::set_string "django_collectstatic" "disabled-file"
	exit 0
fi

if [[ "${DISABLE_COLLECTSTATIC:-0}" != "0" ]]; then
	output::step "Skipping Django collectstatic since the env var DISABLE_COLLECTSTATIC is set."
	build_data::set_string "django_collectstatic" "disabled-env-var"
	exit 0
fi

# Ensure that Django is actually installed.
# shellcheck disable=SC2310 # TODO: This function is invoked in an 'if' condition so set -e will be disabled.
if ! is_module_available 'django'; then
	exit 0
fi

# Location of 'manage.py', if it exists.
MANAGE_FILE=$(find . -maxdepth 3 -type f -name 'manage.py' -printf '%d\t%P\n' | sort -nk1 | cut -f2 | head -1)
MANAGE_FILE=${MANAGE_FILE:-fakepath}

if [[ ! -f "${MANAGE_FILE}" ]]; then
	output::step "Skipping Django collectstatic since no manage.py file found."
	build_data::set_string "django_collectstatic" "skipped-no-manage-py"
	exit 0
fi

build_data::set_string "django_collectstatic" "enabled"

output::step "$ python ${MANAGE_FILE} collectstatic --noinput"

PYTHONPATH="${PYTHONPATH:-.}"
export PYTHONPATH
COLLECTSTATIC_LOG=$(mktemp)

set +e
python "${MANAGE_FILE}" collectstatic --noinput --traceback 2>&1 | tee "${COLLECTSTATIC_LOG}" | sed --unbuffered '/^Post-processed/d;/^Copying/d;/^$/d' | output::indent
COLLECTSTATIC_STATUS="${PIPESTATUS[0]}"
set -e

echo

if [[ "${COLLECTSTATIC_STATUS}" == 0 ]]; then
	exit 0
fi

# Display a warning if collectstatic failed.
if grep -q 'SyntaxError' "${COLLECTSTATIC_LOG}"; then
	build_data::set_string "failure_reason" "collectstatic-syntax-error"
elif grep -q 'ImproperlyConfigured' "${COLLECTSTATIC_LOG}"; then
	build_data::set_string "failure_reason" "collectstatic-improper-configuration"
elif grep -q 'The CSS file' "${COLLECTSTATIC_LOG}"; then
	build_data::set_string "failure_reason" "collectstatic-fancy-references"
elif grep -q 'OSError' "${COLLECTSTATIC_LOG}"; then
	build_data::set_string "failure_reason" "collectstatic-missing-file"
else
	build_data::set_string "failure_reason" "collectstatic-other"
fi

output::error <<-EOF
	Error: Unable to generate Django static files.

	The 'python ${MANAGE_FILE} collectstatic --noinput' Django
	management command to generate static files failed.

	See the traceback above for details.

	You may need to update application code to resolve this error.
	Or, you can disable collectstatic for this application:

	   $ heroku config:set DISABLE_COLLECTSTATIC=1

	https://devcenter.heroku.com/articles/django-assets
EOF

# Additionally, dump out the environment, if debug mode is on.
if [[ "${DEBUG_COLLECTSTATIC:-0}" == "1" ]]; then
	echo
	echo "****** Collectstatic environment variables:"
	echo
	# TODO: Sort the displayed env vars to make the order deterministic.
	env | output::indent
fi

exit 1
