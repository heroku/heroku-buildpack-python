#!/usr/bin/env bash

set +e
runtime-fixer runtime.txt

if [[ -r "$BUILD_DIR/test-runtime.txt" ]]; then
    PYTHON_VERSION=$(cat $BUILD_DIR/test-runtime.txt)
    echo $PYTHON_VERSION
else
    PYTHON_VERSION=$(cat runtime.txt)
fi
# The location of the pre-compiled python binary.
VENDORED_PYTHON="${VENDOR_URL}runtimes/$PYTHON_VERSION.tar.gz"

if [[ `wget -S --spider 'https://lang-python.s3.amazonaws.com/runtimes/python-3.6.5.tar.gz'  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then echo "true"; fi


if [[ $PYTHON_VERSION =~ ^python-2 ]]; then
    puts-warn "The latest version of Python is $LATEST_3 (you are using $PYTHON_VERSION, which is unsupported)."
    echo "`cat $BIN_DIR/downgrade-doc.txt`"
    exit 1
else
  if [[ "$PYTHON_VERSION" != "$LATEST_3" ]]; then
    puts-warn "The latest version of Python 3 is $LATEST_3 (you are using $PYTHON_VERSION, which is unsupported)."
    puts-warn "We recommend upgrading by specifying the latest version ($LATEST_3)."
    echo "       Learn More: https://devcenter.heroku.com/articles/python-runtimes"
  fi
fi

if [[ "$STACK" != "$CACHED_PYTHON_STACK" ]]; then
    puts-step "Stack has changed from $CACHED_PYTHON_STACK to $STACK, clearing cache"
    rm -fr .heroku/python-stack .heroku/python-version .heroku/python .heroku/vendor
fi

if [ -f .heroku/python-version ]; then
  if [ ! "$(cat .heroku/python-version)" = "$PYTHON_VERSION" ]; then
      puts-step "Found $(cat .heroku/python-version), removing"
      rm -fr .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi

if [ ! "$SKIP_INSTALL" ]; then
    puts-step "Attempting to install $PYTHON_VERSION..."

    # Prepare destination directory.
    mkdir -p .heroku/python

    mcount "version.python.$PYTHON_VERSION"
    echo "blah"
    echo "${VENDORED_PYTHON}"
    if ! curl "${VENDORED_PYTHON}" -s | tar zxv -C .heroku/python &> /dev/null; then
      puts-warn "Requested runtime ($PYTHON_VERSION) is not available for this stack ($STACK)."
      echo "`cat $BIN_DIR/downgrade-doc.txt`"
      exit 1
    fi

  # Record for future reference.
  echo "$PYTHON_VERSION" > .heroku/python-version
  echo "$STACK" > .heroku/python-stack
  FRESH_PYTHON=true

  hash -r
fi

# If Pip isn't up to date:
if [ "$FRESH_PYTHON" ] || [[ ! $(pip --version) == *$PIP_UPDATE* ]]; then

  puts-step "Installing pip"

  # Remove old installations.
  rm -fr /app/.heroku/python/lib/python*/site-packages/pip-*
  rm -fr /app/.heroku/python/lib/python*/site-packages/setuptools-*

  /app/.heroku/python/bin/python "$ROOT_DIR/vendor/get-pip.py" pip=="$PIP_UPDATE" &> /dev/null
  /app/.heroku/python/bin/pip install "$ROOT_DIR/vendor/setuptools-39.0.1-py2.py3-none-any.whl" &> /dev/null

fi

set -e
hash -r
