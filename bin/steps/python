#!/usr/bin/env bash

# TODO: Replace runtime-fixer with a bash equivalent, since currently on rebuilds it
# gets run with the cached Python install (rather than system Python), which means it
# fails to run with glibc errors on stack downgrades (see spec/hatchet/stack_spec.rb).
# To work around this for now, non-zero exit codes are ignored (most runtime.txt files
# don't need fixing up, so the script not running won't normally matter).
runtime-fixer runtime.txt || true
PYTHON_VERSION=$(cat runtime.txt)

# The location of the pre-compiled python binary.
PYTHON_URL="${S3_BASE_URL}/${STACK}/runtimes/${PYTHON_VERSION}.tar.gz"

if ! curl --output /dev/null --silent --head --fail --retry 3 --retry-connrefused --connect-timeout 5 "${PYTHON_URL}"; then
  puts-warn "Requested runtime '${PYTHON_VERSION}' is not available for this stack (${STACK})."
  puts-warn "For supported versions, see: https://devcenter.heroku.com/articles/python-support"
  exit 1
fi

function eol_python_version_error() {
  local major_version="${1}"
  local eol_date="${2}"
  puts-warn
  puts-warn "Python ${major_version} reached upstream end-of-life on ${eol_date}, and is"
  puts-warn "therefore no longer receiving security updates:"
  puts-warn "https://devguide.python.org/versions/#supported-versions"
  puts-warn
  puts-warn "As such, it is no longer supported by the latest version of this buildpack."
  puts-warn
  puts-warn "Please upgrade to a newer Python version. See:"
  puts-warn "https://devcenter.heroku.com/articles/python-runtimes"
  puts-warn
  exit 1
}

function warn_if_patch_update_available() {
  local current_version="${1}"
  local latest_patch_version="${2}"
  if [[ "${current_version}" != "${latest_patch_version}" ]]; then
    puts-warn
    puts-warn "A Python security update is available! Upgrade as soon as possible to: ${latest_patch_version}"
    puts-warn "See: https://devcenter.heroku.com/articles/python-runtimes"
    puts-warn
  fi
}

case "${PYTHON_VERSION}" in
  python-3.11.*)
    warn_if_patch_update_available "${PYTHON_VERSION}" "${LATEST_311}"
    ;;
  python-3.10.*)
    warn_if_patch_update_available "${PYTHON_VERSION}" "${LATEST_310}"
    ;;
  python-3.9.*)
    warn_if_patch_update_available "${PYTHON_VERSION}" "${LATEST_39}"
    ;;
  python-3.8.*)
    warn_if_patch_update_available "${PYTHON_VERSION}" "${LATEST_38}"
    ;;
  python-3.7.*)
    warn_if_patch_update_available "${PYTHON_VERSION}" "${LATEST_37}"
    ;;
  python-3.6.*)
    puts-warn
    puts-warn "Python 3.6 reached upstream end-of-life on December 23rd, 2021, and is"
    puts-warn "therefore no longer receiving security updates:"
    puts-warn "https://devguide.python.org/versions/#supported-versions"
    puts-warn
    puts-warn "Upgrade to a newer Python version as soon as possible to keep your app secure."
    puts-warn "See: https://devcenter.heroku.com/articles/python-runtimes"
    puts-warn
    warn_if_patch_update_available "${PYTHON_VERSION}" "${LATEST_36}"
    ;;
  python-3.5.*)
    eol_python_version_error "3.5" "September 30th, 2020"
    ;;
  python-3.4.*)
    eol_python_version_error "3.4" "March 18th, 2019"
    ;;
  python-2.7.*)
    puts-warn
    puts-warn "Python 2 reached upstream end-of-life on January 1st, 2020, and is"
    puts-warn "therefore no longer receiving security updates. Apps still using it"
    puts-warn "contain potential security vulnerabilities and should be upgraded to"
    puts-warn "Python 3 as soon as possible."
    puts-warn
    puts-warn "In addition, Python 2 is only supported on our oldest stack, Heroku-18,"
    puts-warn "which is deprecated and reaches end-of-life on April 30th, 2023."
    puts-warn
    puts-warn "As such, it is no longer supported by the latest version of this buildpack:"
    puts-warn "https://devcenter.heroku.com/changelog-items/2473"
    puts-warn
    puts-warn "You must either:"
    puts-warn "  - Upgrade to Python 3 (recommended)"
    puts-warn "  - Switch to the container stack and use the upstream legacy 'python:2.7' Docker images"
    puts-warn "  - Switch to an older version of the Python buildpack (short term workaround only)"
    puts-warn
    puts-warn "For more details, see:"
    puts-warn "https://devcenter.heroku.com/articles/python-2-7-eol-faq"
    puts-warn
    exit 1
    ;;
  pypy*)
    puts-warn
    puts-warn "PyPy is no longer supported by the latest version of this buildpack."
    puts-warn
    puts-warn "Please switch to one of the supported CPython versions by updating your"
    puts-warn "runtime.txt file. See:"
    puts-warn "https://devcenter.heroku.com/articles/python-support"
    puts-warn
    exit 1
    ;;
esac

mcount "version.python.${PYTHON_VERSION}"

if [[ "$STACK" != "$CACHED_PYTHON_STACK" ]]; then
    puts-step "Stack has changed from $CACHED_PYTHON_STACK to $STACK, clearing cache"
    rm -rf .heroku/python-stack .heroku/python-version .heroku/python .heroku/vendor .heroku/python .heroku/python-sqlite3-version
fi

if [ -f .heroku/python-version ]; then
  if [ ! "$(cat .heroku/python-version)" = "$PYTHON_VERSION" ]; then
      puts-step "Python version has changed from $(cat .heroku/python-version) to ${PYTHON_VERSION}, clearing cache"
      rm -rf .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi

# If using Pip, check if we should reinstall python dependencies given that requirements.txt
# is non-deterministic (not all packages pinned, doesn't handle uninstalls etc). We don't need
# to do this when using Pipenv, since it has a lockfile and syncs the packages for us.
if [[ -f "${BUILD_DIR}/requirements.txt" ]]; then
  if [[ ! -f "$CACHE_DIR/.heroku/requirements.txt" ]]; then
    # This is a the first build of an app (or the build cache was cleared). Since there
    # are no cached packages, we only need to store the requirements file for next time.
    cp -R "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt"
  else
    # IF there IS a cached directory, check for differences with the new one
    if ! diff "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt" &> /dev/null; then
      puts-step "Requirements file has been changed, clearing cached dependencies"
      # if there are any differences, clear the Python cache
      # Installing Python over again does not take noticably more time
      cp -R "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt"
      rm -rf .heroku/python
      unset SKIP_INSTALL
    else
      puts-step "No change in requirements detected, installing from cache"
    fi
  fi
fi

if [[ -n "${SKIP_INSTALL}" ]]; then
  puts-step "Using cached install of ${PYTHON_VERSION}"
else
  puts-step "Installing ${PYTHON_VERSION}"

  # Prepare destination directory.
  mkdir -p .heroku/python

  if ! curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 5 "${PYTHON_URL}" | tar -zxC .heroku/python; then
    # The Python version was confirmed to exist previously, so any failure here is due to
    # a networking issue or archive/buildpack bug rather than the runtime not existing.
    puts-warn "Failed to download/install ${PYTHON_VERSION}"
    exit 1
  fi

  # Record for future reference.
  echo "$PYTHON_VERSION" > .heroku/python-version
  echo "$STACK" > .heroku/python-stack

  hash -r
fi

PIP_VERSION='22.2.2'
SETUPTOOLS_VERSION='63.4.3'
WHEEL_VERSION='0.37.1'

case "${PYTHON_VERSION}" in
  python-3.6.*)
    # Python 3.6 support was dropped in pip 22+ and setuptools 59.7.0+.
    PIP_VERSION='21.3.1'
    SETUPTOOLS_VERSION='59.6.0'
    ;;
esac

puts-step "Installing pip ${PIP_VERSION}, setuptools ${SETUPTOOLS_VERSION} and wheel ${WHEEL_VERSION}"

# We don't use get-pip.py, since:
#  - it uses `--force-reinstall`, which is unnecessary here and slows down repeat builds
#  - it means downloading pip twice (once embedded in get-pip.py, and again during
#    the install, since get-pip.py can't install the embedded version directly)
#  - we would still have to manage several versions of get-pip.py, to support older Pythons.
# Instead, we use the pip wheel to install itself, using the method described here:
# https://github.com/pypa/pip/issues/2351#issuecomment-69994524

PIP_WHEEL_FILENAME="pip-${PIP_VERSION}-py3-none-any.whl"
PIP_WHEEL_URL="${S3_BASE_URL}/common/${PIP_WHEEL_FILENAME}"
PIP_WHEEL="${TMPDIR:-/tmp}/${PIP_WHEEL_FILENAME}"

if ! curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 5 "${PIP_WHEEL_URL}" -o "$PIP_WHEEL"; then
  mcount "failure.python.download-pip"
  puts-warn "Failed to download pip"
  exit 1
fi

/app/.heroku/python/bin/python "${PIP_WHEEL}/pip" install --quiet --disable-pip-version-check --no-cache \
  "${PIP_WHEEL}" "setuptools==${SETUPTOOLS_VERSION}" "wheel==${WHEEL_VERSION}"

hash -r
